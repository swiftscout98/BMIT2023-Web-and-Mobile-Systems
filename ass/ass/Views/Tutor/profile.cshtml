@model ass.Models.Tutor
@{
    ViewBag.Title = "Tutor | Profile";
    var tutorId = ViewBag.TutorId;
}
<!-- Add this below the h2 tag -->
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

<style>
    /* General Styling */
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
        color: #333;
    }

    .account-page {
        max-width: 600px;
        margin: 20px auto;
        background-color: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    .account-detail {
        padding: 20px;
    }

    .billing-detail h3 {
        margin-bottom: 15px;
        font-size: 1.5em;
        color: #444;
    }

    /* Form Styling */
    form.checkout-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

        form.checkout-form .form-group {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
        }

        form.checkout-form label {
            font-weight: 600;
            margin-bottom: 5px;
            color: #555;
        }

        form.checkout-form input[type="text"],
        form.checkout-form input[type="email"],
        form.checkout-form input[type="tel"],
        form.checkout-form input[type="file"] {
            padding: 10px;
            font-size: 1em;
            border: 1px solid #ccc;
            border-radius: 5px;
            width: 100%;
            box-sizing: border-box;
            outline: none;
            transition: border-color 0.3s ease;
        }

        form.checkout-form input:focus {
            border-color: #007bff;
        }

    /* Drag and Drop Styling */
    .drop-zone {
        border: 2px dashed #ccc;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        margin-top: 10px;
        cursor: pointer;
        transition: border-color 0.3s ease;
    }

        .drop-zone:hover {
            border-color: #007bff;
        }

        .drop-zone p {
            margin: 10px 0;
            color: #777;
        }

        .drop-zone img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            margin-top: 10px;
            border: 2px solid #ddd;
        }

        .drop-zone.dragover {
            border-color: #007bff;
            background-color: #f0f8ff;
        }

    /* Buttons */
    form.checkout-form button {
        padding: 10px 20px;
        font-size: 1em;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        form.checkout-form button:hover {
            background-color: #0056b3;
        }
    /* Webcam Button */
    .webcam-btn {
        margin-top: 10px;
        padding: 8px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.7);
    }

    .modal-content {
        background-color: #fff;
        margin: 10% auto;
        padding: 20px;
        width: 80%;
        max-width: 500px;
        border-radius: 8px;
    }

    .close {
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    #webcam {
        width: 100%;
        border-radius: 8px;
        margin: 10px 0;
    }

    .webcam-controls {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 15px;
    }

        .webcam-controls button {
            padding: 8px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
</style>

<h2>Profile Information</h2>

<div class="account-page">
    <div class="account-detail">
        <br>
        <div class="billing-detail">
            <form class="checkout-form" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" value="@Model.TutorName" placeholder="Enter your name" required>
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" value="@Model.TutorEmail" placeholder="Enter your email" required>
                </div>

                <div class="form-group">
                    <label for="phone">Phone:</label>
                    <input type="tel" id="phone" name="phone" value="@Model.TutorPhone" placeholder="Enter your phone number" required>
                </div>

                <div class="form-group">
                    <label for="photo">Photo:</label>
                    <div class="drop-zone" id="drop-zone">
                        <p>Drag & Drop your photo here or click to upload</p>
                        <img id="photo-preview" src="@(string.IsNullOrEmpty(Model.TutorAvatarURL) ? "/images/photo.jpg" : $"/Tutors/{Model.TutorAvatarURL}")" alt="Avatar preview">
                        <input type="file" id="photo" name="photo" accept="image/*" onchange="previewPhoto(event)" hidden>
                    </div>
                    <button type="button" class="webcam-btn" onclick="openWebcam()">
                        <i class="material-icons">camera_alt</i> Use Webcam
                    </button>

                    <!-- Webcam Modal -->
                    <div id="webcamModal" class="modal">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <video id="webcam" autoplay playsinline></video>
                            <canvas id="canvas" style="display:none;"></canvas>
                            <div class="webcam-controls">
                                <button type="button" onclick="capturePhoto()">Take Photo</button>
                                <button type="button" onclick="retakePhoto()" style="display:none;">Retake</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <button type="submit">Update Details</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- JavaScript for Drag-and-Drop and Preview -->
<script>
    const dropZone = document.getElementById('drop-zone');
    const photoInput = document.getElementById('photo');
    const photoPreview = document.getElementById('photo-preview');

    // Click event to trigger file input
    dropZone.addEventListener('click', () => {
        photoInput.click();
    });

    // Change event for file input
    photoInput.addEventListener('change', previewPhoto);

    // Dragover event
    dropZone.addEventListener('dragover', (event) => {
        event.preventDefault();
        dropZone.classList.add('dragover');
    });

    // Dragleave event
    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });

    // Drop event
    dropZone.addEventListener('drop', (event) => {
        event.preventDefault();
        dropZone.classList.remove('dragover');
        const file = event.dataTransfer.files[0];
        if (file) {
            photoInput.files = event.dataTransfer.files;
            previewPhoto({ target: { files: [file] } });
        }
    });

    // Preview Function
    function previewPhoto(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                photoPreview.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
    }

    // Webcam functionality
    let stream;
    const modal = document.getElementById('webcamModal');
    const video = document.getElementById('webcam');
    const canvas = document.getElementById('canvas');
    const captureBtn = document.querySelector('.webcam-controls button');
    const retakeBtn = document.querySelector('.webcam-controls button:last-child');

    function openWebcam() {
        modal.style.display = 'block';
        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
            .then(videoStream => {
                stream = videoStream;
                video.srcObject = stream;
            })
            .catch(error => {
                console.error('Error accessing webcam:', error);
                alert('Unable to access webcam. Please make sure you have granted permission.');
            });
    }

    function capturePhoto() {
        const context = canvas.getContext('2d');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Convert to file
        canvas.toBlob(blob => {
            const file = new File([blob], "webcam-capture.jpg", { type: "image/jpeg" });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            photoInput.files = dataTransfer.files;

            // Update preview
            photoPreview.src = canvas.toDataURL('image/jpeg');

            // Show retake button
            captureBtn.style.display = 'none';
            retakeBtn.style.display = 'block';
            video.style.display = 'none';
            canvas.style.display = 'block';
        }, 'image/jpeg');
    }

    function retakePhoto() {
        video.style.display = 'block';
        canvas.style.display = 'none';
        captureBtn.style.display = 'block';
        retakeBtn.style.display = 'none';
    }

    // Close modal and stop webcam
    document.querySelector('.close').onclick = function() {
        modal.style.display = 'none';
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        video.srcObject = null;
        video.style.display = 'block';
        canvas.style.display = 'none';
        captureBtn.style.display = 'block';
        retakeBtn.style.display = 'none';
    }

    // Close modal if clicked outside
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = 'none';
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
            video.srcObject = null;
        }
    }
</script>
